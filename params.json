{"name":"sbt-tasks","tagline":"sbt plugin akin to the rails/rake custom tasks","body":"## Introduction\r\n\r\n`sbt-tasks` is an `sbt` plugin that gives `sbt` project Rails/Rake like functionality to execute tasks directly in `sbt` with the full\r\nclasspath and dependencies loaded.  This means you can do awesome things like seed and reset databases, perform\r\nmigrations and other things that are project specific.\r\n\r\n## Requirements\r\n\r\n- [sbt](http://www.scala-sbt.org/) 0.13\r\n\r\n## Installation\r\n\r\nAdd the following lines to ~/.sbt/0.13/plugins/build.sbt or PROJECT_DIR/project/plugins.sbt\r\n\r\n    resolvers += \"yobreifca.se repository\" at \"http://yobriefca.se/maven\"\r\n\r\n    addSbtPlugin(\"se.yobriefca\" % \"sbt-tasks\" % \"0.3.6\")\r\n\r\n> ** Version numbers may not be accurate **\r\n\r\n## Usage\r\n\r\nThere are 2 ways to create tasks - with and without args.  There isn't yet a simple one size fits all appraoch yet (this needs further design).\r\n\r\n### Tasks (without args)\r\n\r\nFirst of all create a `Task` in the `tasks` package (this is the default place and can be configured... see later).\r\n\r\nA `Task` is simply a class that implements `Runnable` e.g.\r\n\r\n    package tasks\r\n\r\n    class Printy extends Runnable {\r\n        def run = println(\"Useless Printy Task\")\r\n    }\r\n\r\nThen in your `build.sbt` or `Build.scala` file (example shows `build.sbt`) import the plugin and `install` some tasks\r\n\r\n    import se.yobriefca.SbtTasks._\r\n    ...\r\n    installTask(\"printy\")\r\n    ...\r\n\r\nThis allows you to do `sbt printy` on the command line to run the associated `Printy` task.\r\n\r\nIf you want to also add a bit of descriptive text for your task you can call `installTask` with an extra argument\r\n\r\n    ...\r\n    installTask(\"printy\", \"Prints a pointless message\")\r\n    ...\r\n\r\n### Tasks (expecting arguments)\r\n\r\nThe only differences between tasks without args and ones with are that they are,\r\n\r\n1. Installed different `installTaskWithArgs(<same_parameters_as_before>)`\r\n2. Expect an `Array[String]` in their constructor\r\n\r\nWe can extend the `printy` task above to take arguments\r\n\r\n    package tasks\r\n\r\n    class Printy(args: Array[String]) extends Runnable {\r\n        def run = args.foreach(println)\r\n    }\r\n\r\nThen install it like so,\r\n\r\n     installTaskWithArgs(\"printy\", \"Prints a pointless message\")\r\n \r\n Then in SBT we can call it like so,\r\n \r\n    > printy arg1 arg2 arg3\r\n    [run-task] printy\r\n    arg1 \r\n    arg2 \r\n    arg3\r\n    [success] Total time: 0 s, completed ...\r\n    \r\nThe whole thing tries to be as helpful as possible when you try and install a task expecting args with `installTask` or a task not expecting args with `installTaskWithArgs`.  __This needs careful review as it affects clobbing of arguments between the two commands and may be refactored later__\r\n\r\n### Wait so how does `sbt-tasks` know what task to run?\r\n\r\nGood question.  It uses the defined package name (defaulting to `tasks`) and the convention of\r\n`taskname.captialize` - so `printy` will call `tasks.Printy`.\r\n\r\n## Configuration\r\n\r\nThere is very little configuration involved in `sbt-tasks` but you can currently modify the default package that `sbt-tasks`\r\nwill look for `Tasks` in.  We can extend our example `build.sbt` to achieve this\r\n\r\n    import se.yobriefca.SbtTasks._\r\n    ...\r\n    defaultTaskPackage := \"errands\"\r\n    ...\r\n    installTask(\"printy\")\r\n    ...\r\n\r\nSo in this case the task resolution on `printy` will look for `errands.Printy`\r\n\r\n## Play! 2 Integration\r\n\r\nWith a simple trait it's possible to gain access to your Play! application within your tasks which allows you to gain\r\naccess to its plugins and configuration properties\r\n\r\n    import play.core.StaticApplication\r\n\r\n    trait PlayTask extends Runnable {\r\n      val application = new StaticApplication(new java.io.File(\".\"))\r\n    }\r\n\r\n    class PrintyTask extends PlayTask {\r\n        def run() = {\r\n            val configSetting = application.configuration... // get some Play! configuration\r\n            println(configSetting)\r\n        }\r\n    }\r\n\r\n## Changes\r\n\r\n    sbt-task 0.2.0 (19 Nov 2013)\r\n    - Added description argument to installTask task\r\n\r\n    sbt-task 0.3.16 (26 Nov 2013)\r\n    - Added tasks that accept arguments (installTaskWithArgs)\r\n    - Added logging for displaying name of running task\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 James Hughes (james@yobriefca.se)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"UA-19143623-5","note":"Don't delete this file! It's used internally to help with page regeneration."}